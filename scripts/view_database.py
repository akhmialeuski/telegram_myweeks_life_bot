#!/usr/bin/env python3
"""Database viewer script for LifeWeeksBot.

This script allows you to view the contents of the database
including users and their settings.
"""

import sys
from pathlib import Path

# Add src directory to Python path
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

from database import SQLAlchemyUserRepository, User, UserSettings
from database.constants import DEFAULT_DATABASE_PATH


def view_database():
    """View all data in the database."""
    print("=" * 60)
    print("LifeWeeksBot Database Viewer")
    print("=" * 60)

    # Initialize repository
    repo = SQLAlchemyUserRepository()
    repo.initialize()

    try:
        # Get all users
        users = repo.get_all_users()

        if not users:
            print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print()

        for i, user in enumerate(users, 1):
            print(f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{i}")
            print(f"   ID: {user.telegram_id}")
            print(f"   Username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"   –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"   –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at}")

            # Get user settings
            settings = repo.get_user_settings(user.telegram_id)
            if settings:
                print(f"   üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {settings.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
                print(f"   üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.timezone or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"   üìÖ –î–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {settings.notifications_day or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"   ‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {settings.notifications_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"   üìä –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {settings.life_expectancy or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –ª–µ—Ç")
                print(f"   üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {settings.updated_at}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    finally:
        repo.close()


def view_specific_user(telegram_id: int):
    """View specific user by Telegram ID.

    :param telegram_id: Telegram user ID
    """
    print(f"=" * 60)
    print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    print(f"=" * 60)

    # Initialize repository
    repo = SQLAlchemyUserRepository()
    repo.initialize()

    try:
        # Get user profile
        user_profile = repo.get_user_profile(telegram_id)

        if not user_profile:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user = user_profile.user
        settings = user_profile.settings

        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")
        print(f"   ID: {user.telegram_id}")
        print(f"   Username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        print(f"   –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at}")
        print()

        print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {settings.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
        print(f"   –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.timezone or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   –î–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {settings.notifications_day or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {settings.notifications_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {settings.life_expectancy or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –ª–µ—Ç")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {settings.updated_at}")

        if settings.birth_date:
            from datetime import date
            today = date.today()
            days_lived = (today - settings.birth_date).days
            weeks_lived = days_lived // 7
            age = today.year - settings.birth_date.year
            if today.month < settings.birth_date.month or (today.month == settings.birth_date.month and today.day < settings.birth_date.day):
                age -= 1

            print()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç")
            print(f"   –î–Ω–µ–π –ø—Ä–æ–∂–∏—Ç–æ: {days_lived:,}")
            print(f"   –ù–µ–¥–µ–ª—å –ø—Ä–æ–∂–∏—Ç–æ: {weeks_lived:,}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    finally:
        repo.close()


def main():
    """Main function."""
    import argparse

    parser = argparse.ArgumentParser(description="LifeWeeksBot Database Viewer")
    parser.add_argument("--user", "-u", type=int, help="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    parser.add_argument("--file", "-f", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: lifeweeks.db)")

    args = parser.parse_args()

    if args.file:
        # Override default database path
        import os
        os.environ["DATABASE_PATH"] = args.file

    if args.user:
        view_specific_user(args.user)
    else:
        view_database()


if __name__ == "__main__":
    main()