"""Command handlers for the Telegram bot."""

from datetime import date, datetime

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from ..database import SQLAlchemyUserRepository, User, UserSettings
from ..database.constants import (
    DEFAULT_NOTIFICATIONS_DAY,
    DEFAULT_NOTIFICATIONS_ENABLED,
    DEFAULT_NOTIFICATIONS_TIME,
    DEFAULT_TIMEZONE,
)
from ..utils.logger import get_logger
from ..visualization.grid import generate_visualization

logger = get_logger("LifeWeeksBot")

# Conversation states
WAITING_BIRTH_DATE = 1

# Global repository instance
repository = SQLAlchemyUserRepository()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /start command - ask for birth date and register user.

    :param update: The update object containing the message.
    :param context: The context object for the command.
    :returns: Conversation state
    """
    user = update.effective_user

    logger.info(f"User {user.id} ({user.username}) started the bot")

    # Check if user already exists
    existing_user = repository.get_user(user.id)
    if existing_user:
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /weeks —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–µ–¥–µ–ª–∏ –∂–∏–∑–Ω–∏.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        return ConversationHandler.END

    # Ask for birth date
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LifeWeeksBot!\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ–¥–µ–ª–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.\n\n"
        f"üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
    )

    return WAITING_BIRTH_DATE


async def handle_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle birth date input from user.

    :param update: The update object containing the message.
    :param context: The context object for the command.
    :returns: Conversation state
    """
    user = update.effective_user
    birth_date_text = update.message.text.strip()

    try:
        # Parse birth date
        birth_date = datetime.strptime(birth_date_text, "%d.%m.%Y").date()

        # Validate birth date (not in future, reasonable past)
        today = date.today()
        if birth_date > today:
            await update.message.reply_text(
                "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return WAITING_BIRTH_DATE

        if birth_date.year < 1900:
            await update.message.reply_text(
                "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return WAITING_BIRTH_DATE

        # Parse default notifications time
        notifications_time = datetime.strptime(
            DEFAULT_NOTIFICATIONS_TIME, "%H:%M:%S"
        ).time()

        # Create user and settings
        new_user = User(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            created_at=datetime.utcnow(),
        )

        new_settings = UserSettings(
            telegram_id=user.id,
            birth_date=birth_date,
            notifications=DEFAULT_NOTIFICATIONS_ENABLED,
            timezone=DEFAULT_TIMEZONE,
            notifications_day=DEFAULT_NOTIFICATIONS_DAY,
            notifications_time=notifications_time,
            updated_at=datetime.utcnow(),
        )

        # Save to database
        if repository.create_user_profile(new_user, new_settings):
            # Calculate weeks lived
            weeks_lived = calculate_weeks_lived(birth_date)

            await update.message.reply_text(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
                f"üìä –ù–µ–¥–µ–ª—å –ø—Ä–æ–∂–∏—Ç–æ: {weeks_lived:,}\n\n"
                f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ /weeks - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª–∏ –∂–∏–∑–Ω–∏\n"
                f"‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
            )

            logger.info(f"User {user.id} registered with birth date {birth_date}")
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return WAITING_BIRTH_DATE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /cancel command to cancel registration.

    :param update: The update object containing the message.
    :param context: The context object for the command.
    :returns: Conversation state
    """
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n" "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )
    return ConversationHandler.END


async def weeks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /weeks command to display weeks and months lived.

    :param update: The update object containing the message.
    :type update: Update
    :param context: The context object for the command.
    :type context: ContextTypes.DEFAULT_TYPE
    :returns: None
    """
    user = update.effective_user
    user_id = user.id

    logger.info(f"Handling /weeks command from user {user_id}")

    # Get user profile from database
    user_profile = repository.get_user_profile(user_id)
    if not user_profile or not user_profile.settings.birth_date:
        await update.message.reply_text(
            "‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
        )
        return

    # Calculate weeks from user's birth date
    birth_date = user_profile.settings.birth_date
    weeks_lived = calculate_weeks_lived(birth_date)
    age = calculate_age(birth_date)

    await update.message.reply_text(
        f"üìä –¢–≤–æ–∏ –Ω–µ–¥–µ–ª–∏ –∂–∏–∑–Ω–∏:\n\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
        f"üìà –ù–µ–¥–µ–ª—å –ø—Ä–æ–∂–∏—Ç–æ: {weeks_lived:,}\n"
        f"üéØ –ù–µ–¥–µ–ª—å –≤ –≥–æ–¥—É: 52\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç"
    )


async def visualize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /visualize command to show a visual representation of weeks lived.

    :param update: The update object containing the message.
    :type update: Update
    :param context: The context object for the command.
    :type context: ContextTypes.DEFAULT_TYPE
    :returns: None
    """
    try:
        user = update.effective_user
        user_id = user.id

        logger.info(f"Handling /visualize command from user {user_id}")

        # Check if user is registered
        user_profile = repository.get_user_profile(user_id)
        if not user_profile or not user_profile.settings.birth_date:
            await update.message.reply_text(
                "‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
            )
            return

        birth_date_str = user_profile.settings.birth_date.strftime("%Y-%m-%d")
        img_byte_arr = generate_visualization(birth_date_str)
        await update.message.reply_photo(
            photo=img_byte_arr,
            caption="Visual representation of your life in weeks.\n"
            "üü© Green cells: weeks lived\n"
            "‚¨ú Empty cells: weeks to come",
        )
    except Exception as error:  # pylint: disable=broad-exception-caught
        logger.error(f"Error generating visualization: {error}")
        await update.message.reply_text(
            "Sorry, there was an error generating the visualization."
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /help command - show help information.

    :param update: The update object containing the message.
    :param context: The context object for the command.
    :returns: None
    """
    help_text = (
        "ü§ñ LifeWeeksBot - –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ–¥–µ–ª–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
        "‚Ä¢ /weeks - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª–∏ –∂–∏–∑–Ω–∏\n"
        "‚Ä¢ /visualize - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å –∂–∏–∑–Ω–∏\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n"
        "‚Ä¢ –í –≥–æ–¥—É 52 –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: 80 –ª–µ—Ç\n"
        "‚Ä¢ –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 4,160 –Ω–µ–¥–µ–ª—å\n\n"
        "üéØ –¶–µ–ª—å –±–æ—Ç–∞ - –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Å–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏!"
    )

    await update.message.reply_text(help_text)


def calculate_weeks_lived(birth_date: date) -> int:
    """Calculate weeks lived since birth date.

    :param birth_date: User's birth date
    :returns: Number of weeks lived
    """
    today = date.today()
    days_lived = (today - birth_date).days
    return days_lived // 7


def calculate_age(birth_date: date) -> int:
    """Calculate age in years.

    :param birth_date: User's birth date
    :returns: Age in years
    """
    today = date.today()
    age = today.year - birth_date.year
    if today.month < birth_date.month or (
        today.month == birth_date.month and today.day < birth_date.day
    ):
        age -= 1
    return age
